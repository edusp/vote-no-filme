package br.com.votacao.init;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import javax.servlet.http.HttpServlet;

public class InitDatabase extends HttpServlet {

	
	private static Connection conn;
    private static Statement st;

    // Carrega o banco estaticamente
    static {

        load();

    }


    /**
     * Carrega o objeto de banco de dados
     */
    public static void load() {
        // Se o banco estiver aberto, fecha-o
        if (conn != null || st != null) {
            shutdown();
        }

        // Abre o Driver de conexão
        try {
            Class.forName("org.hsqldb.jdbcDriver");
        } catch (ClassNotFoundException e) {
            System.err.println("Problemas ao carregar o Driver de conexão");
        }
        
        // Abre o banco
        try {
        	
            conn = DriverManager.getConnection("jdbc:hsqldb:" +".banco/arquivos/votacaoDb", "SA", "");
            
            
            st = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,  ResultSet.CONCUR_READ_ONLY); // Objeto de conversacao
            
        } catch (SQLException e) {
            e.printStackTrace();
        }
        
        // Cria tabelas se estas ja nao tiverem sido criadas
        ResultSet rs = query("SELECT * FROM INFORMATION_SCHEMA.SYSTEM_TABLES WHERE TABLE_NAME = 'FILME'");
        
        try {
        	
        	String filme;
            if (!rs.next()) {
            	
                filme = "CREATE TABLE filme(ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL," +
						"NOME VARCHAR(100)," +
						"CATEGORIA VARCHAR(100)," +
						"PONTUACAO BIGINT," +
						"NOME_IMAGEM VARCHAR(100)," +
						"CONSTRAINT PK_FILME PRIMARY KEY(ID))";

                InitDatabase.update(filme);
                
                
                filme =  "INSERT INTO FILME VALUES(1,'Gente grande','Com\u00e9dia', 0, 'g_grande');";
                InitDatabase.update(filme);
                
                filme =  "INSERT INTO FILME VALUES(2,'Entrado numa fria','Com\u00e9dia', 0, 'e_fria');";
                InitDatabase.update(filme);
                
                filme =  "INSERT INTO FILME VALUES(3,'Gravidade','Drama', 0, 'gravidade');";
                InitDatabase.update(filme);
                
                filme =  "INSERT INTO FILME VALUES(4,'Atividade Paranormal','Terror', 0, 'a_paranormal');";
                InitDatabase.update(filme);
                
                filme =  "INSERT INTO FILME VALUES(5,'Batman','A\u00e7\u00e3o', 0, 'batman');";
                InitDatabase.update(filme);
                
            }
            
        } catch (SQLException e) {
            System.err.println("Erro de acesso ao banco");
            System.exit(1);
        }

    }

    /**
     * Retorna o resultado de um Select
     *
     * @param expression Expressao SQL
     */
    public static synchronized ResultSet query(String expression) {

        ResultSet rs = null;
        try {
            rs = st.executeQuery(expression);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return rs;

    }

    /**
     * Fecha o Banco e persiste os Dados
     */
    public static void shutdown() {

        try {
            st.execute("SHUTDOWN");
            conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }

    }

    /**
     * Para comandos como CREATE, DROP, INSERT and UPDATE
     *
     * @param expression Expressao SQL
     */
    public static synchronized void update(String expression) {

    	int i = 0;
    	try {
    		i = st.executeUpdate(expression);
    	} catch (SQLException e) {
    		e.printStackTrace();
    	}

    	if (i == -1) {
    		System.err.println("Erro ao executar expressão : " + expression);
    	}

    }

    public static PreparedStatement getPreparedStatement(String expression) throws SQLException {
        return conn.prepareStatement(expression,
                ResultSet.TYPE_SCROLL_INSENSITIVE,
                ResultSet.CONCUR_READ_ONLY);
    }

    /**
     * Para comandos como CREATE, DROP, INSERT and UPDATE, relança exceções
     *
     * @param expression Expressão SQL
     * @throws Exception
     */
    public static synchronized void update2(String expression) throws Exception {

        int i = 0;
        i = st.executeUpdate(expression);

        if (i == -1) {
            System.err.println("Erro ao executar expressão : " + expression);
        }

    }
    
    public static synchronized void update(PreparedStatement ps) throws SQLException {
       ps.execute();     
    } 
    
	
	
}
